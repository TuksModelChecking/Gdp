Semantics=SingleAssignment;

Agent Environment
	Vars:
		r1: {none,a1,a2,a3};
		r2: {none,a1,a2};
		r3: {none,a2};
		rem_a3 : 0..1;
		rem_a1 : 0..2;
		rem_a2 : 0..2;
	end Vars
	Actions = {none};
	Protocol:
		Other: {none};
	end Protocol
	Evolution:
		r1=a1 if (r1=none and a1.Action=req_r1 and !(a2.Action=req_r1) and !(a3.Action=req_r1));
		r1=none if (r1=a1 and a1.Action=rel_r1);
		r1=none if (r1=a1 and a1.Action=relall);
		rem_a1=rem_a1-1 if (r1=none and a1.Action=req_r1 and !(a2.Action=req_r1) and !(a3.Action=req_r1));
		rem_a1=rem_a1+1 if (r1=a1 and a1.Action=rel_r1);
		rem_a1=2 if (r1=a1 and a1.Action=relall);
		r1=a2 if (r1=none and a2.Action=req_r1 and !(a1.Action=req_r1) and !(a3.Action=req_r1));
		r1=none if (r1=a2 and a2.Action=rel_r1);
		r1=none if (r1=a2 and a2.Action=relall);
		rem_a2=rem_a2-1 if (r1=none and a2.Action=req_r1 and !(a1.Action=req_r1) and !(a3.Action=req_r1));
		rem_a2=rem_a2+1 if (r1=a2 and a2.Action=rel_r1);
		rem_a2=2 if (r1=a2 and a2.Action=relall);
		r1=a3 if (r1=none and a3.Action=req_r1 and !(a1.Action=req_r1) and !(a2.Action=req_r1));
		r1=none if (r1=a3 and a3.Action=rel_r1);
		r1=none if (r1=a3 and a3.Action=relall);
		rem_a3=rem_a3-1 if (r1=none and a3.Action=req_r1 and !(a1.Action=req_r1) and !(a2.Action=req_r1));
		rem_a3=rem_a3+1 if (r1=a3 and a3.Action=rel_r1);
		rem_a3=1 if (r1=a3 and a3.Action=relall);
		r2=a1 if (r2=none and a1.Action=req_r2 and !(a2.Action=req_r2));
		r2=none if (r2=a1 and a1.Action=rel_r2);
		r2=none if (r2=a1 and a1.Action=relall);
		rem_a1=rem_a1-1 if (r2=none and a1.Action=req_r2 and !(a2.Action=req_r2));
		rem_a1=rem_a1+1 if (r2=a1 and a1.Action=rel_r2);
		rem_a1=2 if (r2=a1 and a1.Action=relall);
		r2=a2 if (r2=none and a2.Action=req_r2 and !(a1.Action=req_r2));
		r2=none if (r2=a2 and a2.Action=rel_r2);
		r2=none if (r2=a2 and a2.Action=relall);
		rem_a2=rem_a2-1 if (r2=none and a2.Action=req_r2 and !(a1.Action=req_r2));
		rem_a2=rem_a2+1 if (r2=a2 and a2.Action=rel_r2);
		rem_a2=2 if (r2=a2 and a2.Action=relall);
		r3=a2 if (r3=none and a2.Action=req_r3);
		r3=none if (r3=a2 and a2.Action=rel_r3);
		r3=none if (r3=a2 and a2.Action=relall);
		rem_a2=rem_a2-1 if (r3=none and a2.Action=req_r3);
		rem_a2=rem_a2+1 if (r3=a2 and a2.Action=rel_r3);
		rem_a2=2 if (r3=a2 and a2.Action=relall);
	end Evolution
end Agent

Agent a1
	Lobsvars = {r1,r2,rem_a3,rem_a1,rem_a2};
	Vars:
		rem : 0..2;
		idl : boolean;
	end Vars
	Actions = {req_r1,rel_r1,req_r2,rel_r2,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r1=none : {req_r1};
		rem > 0 and Environment.r1=a1 : {rel_r1};
		rem > 0 and Environment.r2=none : {req_r2};
		rem > 0 and Environment.r2=a1 : {rel_r2};
	end Protocol
	Evolution:
		rem=rem-1 if (Action=req_r1 and Environment.r1=none and Environment.r1 = none and !(a2.Action=req_r1) and !(a3.Action=req_r1));
		rem=rem+1 if (Action=rel_r1);
		rem=2 if (Action=relall);
		idl=false if (Action=req_r1 and Environment.r1=none and Environment.r1 = none and !(a2.Action=req_r1) and !(a3.Action=req_r1));
		idl=false if (Action=rel_r1);
		idl=false if (Action=relall);
		idl=true if (Action=idle);
		rem=rem-1 if (Action=req_r2 and Environment.r2=none and Environment.r2 = none and !(a2.Action=req_r2));
		rem=rem+1 if (Action=rel_r2);
		rem=2 if (Action=relall);
		idl=false if (Action=req_r2 and Environment.r2=none and Environment.r2 = none and !(a2.Action=req_r2));
		idl=false if (Action=rel_r2);
		idl=false if (Action=relall);
		idl=true if (Action=idle);
	end Evolution
end Agent

Agent a2
	Lobsvars = {r1,r2,r3,rem_a3,rem_a1,rem_a2};
	Vars:
		rem : 0..2;
		idl : boolean;
	end Vars
	Actions = {req_r1,rel_r1,req_r2,rel_r2,req_r3,rel_r3,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r1=none : {req_r1};
		rem > 0 and Environment.r1=a2 : {rel_r1};
		rem > 0 and Environment.r2=none : {req_r2};
		rem > 0 and Environment.r2=a2 : {rel_r2};
		rem > 0 and Environment.r3=none : {req_r3};
		rem > 0 and Environment.r3=a2 : {rel_r3};
	end Protocol
	Evolution:
		rem=rem-1 if (Action=req_r1 and Environment.r1=none and Environment.r1 = none and !(a1.Action=req_r1) and !(a3.Action=req_r1));
		rem=rem+1 if (Action=rel_r1);
		rem=2 if (Action=relall);
		idl=false if (Action=req_r1 and Environment.r1=none and Environment.r1 = none and !(a1.Action=req_r1) and !(a3.Action=req_r1));
		idl=false if (Action=rel_r1);
		idl=false if (Action=relall);
		idl=true if (Action=idle);
		rem=rem-1 if (Action=req_r2 and Environment.r2=none and Environment.r2 = none and !(a1.Action=req_r2));
		rem=rem+1 if (Action=rel_r2);
		rem=2 if (Action=relall);
		idl=false if (Action=req_r2 and Environment.r2=none and Environment.r2 = none and !(a1.Action=req_r2));
		idl=false if (Action=rel_r2);
		idl=false if (Action=relall);
		idl=true if (Action=idle);
		rem=rem-1 if (Action=req_r3 and Environment.r3=none and Environment.r3 = none);
		rem=rem+1 if (Action=rel_r3);
		rem=2 if (Action=relall);
		idl=false if (Action=req_r3 and Environment.r3=none and Environment.r3 = none);
		idl=false if (Action=rel_r3);
		idl=false if (Action=relall);
		idl=true if (Action=idle);
	end Evolution
end Agent

Agent a3
	Lobsvars = {r1,rem_a3,rem_a1,rem_a2};
	Vars:
		rem : 0..1;
		idl : boolean;
	end Vars
	Actions = {req_r1,rel_r1,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r1=none : {req_r1};
		rem > 0 and Environment.r1=a3 : {rel_r1};
	end Protocol
	Evolution:
		rem=rem-1 if (Action=req_r1 and Environment.r1=none and Environment.r1 = none and !(a1.Action=req_r1) and !(a2.Action=req_r1));
		rem=rem+1 if (Action=rel_r1);
		rem=1 if (Action=relall);
		idl=false if (Action=req_r1 and Environment.r1=none and Environment.r1 = none and !(a1.Action=req_r1) and !(a2.Action=req_r1));
		idl=false if (Action=rel_r1);
		idl=false if (Action=relall);
		idl=true if (Action=idle);
	end Evolution
end Agent

Evaluation
	a1_eat if (a1.rem=0);
	a2_eat if (a2.rem=0);
	a3_eat if (a3.rem=0);
	not_idle_a1 if (a1.idl=false);
	not_idle_a2 if (a2.idl=false);
	not_idle_a3 if (a3.idl=false);
end Evaluation

InitStates
	Environment.r1=none and
	Environment.r2=none and
	Environment.r3=none and
	Environment.rem_a3=1 and
	Environment.rem_a1=2 and
	Environment.rem_a2=2 and
	a2.rem=2 and
	a3.rem=1;
end InitStates

Groups
	a1_a3_a2 = {a3, a1, a2};
	EXa2_a3 = {a1};
	a1__a3 = {a3, a1, a2};
end Groups

Fairness
	not_idle_a1;
	not_idle_a2;
	not_idle_a3;
end Fairness

Formulae
	(<a1_a3_a2>F a3_eat) and (<a1_a3_a2>F a1_eat) and (<a1_a3_a2>F a2_eat);
	<a1__a3>G ((<a1__a3>F a3_eat) and (<a1__a3>F a1_eat) and (<a1__a3>F a2_eat));
	<EXa2_a3>G (!a2_eat and !a3_eat);
end Formulae

