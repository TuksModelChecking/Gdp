Semantics = SingleAssignment;

Agent Environment
	Vars:
		r1: {none,a2,a3};
		r2: {none,a1,a2,a3};
		r3: {none,a2,a3};
	end Vars
	Actions = {none};
	Protocol:
		Other: {none};
	end Protocol
	Evolution:
		r1 = a2 if (r1=none and a2.Action=req_r1 and !(a3.Action=req_r1));
		r1 = none if (r1 = a2 and a2.Action = rel_r1);
		r1 = none if (r1 = a2 and a2.Action = relall);

		r1 = a3 if (r1=none and a3.Action=req_r1 and !(a2.Action=req_r1));
		r1 = none if (r1 = a3 and a3.Action = rel_r1);
		r1 = none if (r1 = a3 and a3.Action = relall);

		r2 = a1 if (r2=none and a1.Action=req_r2 and !(a2.Action=req_r2) and !(a3.Action=req_r2));
		r2 = none if (r2 = a1 and a1.Action = rel_r2);
		r2 = none if (r2 = a1 and a1.Action = relall);

		r2 = a2 if (r2=none and a2.Action=req_r2 and !(a1.Action=req_r2) and !(a3.Action=req_r2));
		r2 = none if (r2 = a2 and a2.Action = rel_r2);
		r2 = none if (r2 = a2 and a2.Action = relall);

		r2 = a3 if (r2=none and a3.Action=req_r2 and !(a1.Action=req_r2) and !(a2.Action=req_r2));
		r2 = none if (r2 = a3 and a3.Action = rel_r2);
		r2 = none if (r2 = a3 and a3.Action = relall);

		r3 = a2 if (r3=none and a2.Action=req_r3 and !(a3.Action=req_r3));
		r3 = none if (r3 = a2 and a2.Action = rel_r3);
		r3 = none if (r3 = a2 and a2.Action = relall);

		r3 = a3 if (r3=none and a3.Action=req_r3 and !(a2.Action=req_r3));
		r3 = none if (r3 = a3 and a3.Action = rel_r3);
		r3 = none if (r3 = a3 and a3.Action = relall);

	end Evolution
end Agent

Agent a1
	Lobsvars = {r2};
	Vars:
		rem : 0..1;
	end Vars
	Actions = {req_r2,rel_r2,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r2 = none : {req_r2};
		rem > 0 and Environment.r2 = a1 : {rel_r2};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r2 and Environment.r2 = none and Environment.r2 = none and !(a2.Action=req_r2) and !(a3.Action=req_r2));
		rem = rem + 1 if (Action = rel_r2);
		rem = 1 if (Action = relall);

	end Evolution
end Agent

Agent a2
	Lobsvars = {r3,r2,r1};
	Vars:
		rem : 0..3;
	end Vars
	Actions = {req_r3,rel_r3,req_r2,rel_r2,req_r1,rel_r1,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r3 = none : {req_r3};
		rem > 0 and Environment.r3 = a2 : {rel_r3};
		rem > 0 and Environment.r2 = none : {req_r2};
		rem > 0 and Environment.r2 = a2 : {rel_r2};
		rem > 0 and Environment.r1 = none : {req_r1};
		rem > 0 and Environment.r1 = a2 : {rel_r1};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r3 and Environment.r3 = none and Environment.r3 = none and !(a3.Action=req_r3));
		rem = rem + 1 if (Action = rel_r3);
		rem = 3 if (Action = relall);

		rem = rem - 1 if (Action = req_r2 and Environment.r2 = none and Environment.r2 = none and !(a1.Action=req_r2) and !(a3.Action=req_r2));
		rem = rem + 1 if (Action = rel_r2);
		rem = 3 if (Action = relall);

		rem = rem - 1 if (Action = req_r1 and Environment.r1 = none and Environment.r1 = none and !(a3.Action=req_r1));
		rem = rem + 1 if (Action = rel_r1);
		rem = 3 if (Action = relall);

	end Evolution
end Agent

Agent a3
	Lobsvars = {r2,r3,r1};
	Vars:
		rem : 0..1;
	end Vars
	Actions = {req_r2,rel_r2,req_r3,rel_r3,req_r1,rel_r1,relall,idle};
	Protocol:
		rem = 0 : {relall};
		rem > 0 : {idle};
		rem > 0 and Environment.r2 = none : {req_r2};
		rem > 0 and Environment.r2 = a3 : {rel_r2};
		rem > 0 and Environment.r3 = none : {req_r3};
		rem > 0 and Environment.r3 = a3 : {rel_r3};
		rem > 0 and Environment.r1 = none : {req_r1};
		rem > 0 and Environment.r1 = a3 : {rel_r1};
	end Protocol
	Evolution:
		rem = rem - 1 if (Action = req_r2 and Environment.r2 = none and Environment.r2 = none and !(a1.Action=req_r2) and !(a2.Action=req_r2));
		rem = rem + 1 if (Action = rel_r2);
		rem = 1 if (Action = relall);

		rem = rem - 1 if (Action = req_r3 and Environment.r3 = none and Environment.r3 = none and !(a2.Action=req_r3));
		rem = rem + 1 if (Action = rel_r3);
		rem = 1 if (Action = relall);

		rem = rem - 1 if (Action = req_r1 and Environment.r1 = none and Environment.r1 = none and !(a2.Action=req_r1));
		rem = rem + 1 if (Action = rel_r1);
		rem = 1 if (Action = relall);

	end Evolution
end Agent

Evaluation
	a1_eat if (a1.rem = 0);
	a2_eat if (a2.rem = 0);
	a3_eat if (a3.rem = 0);
end Evaluation

InitStates
	Environment.r1 = none and
	Environment.r2 = none and
	Environment.r3 = none and
	a2.rem = 3 and
	a3.rem = 1;
end InitStates

Groups
	all = {a1, a3, a2};
end Groups

Formulae
	<all>G ((<all>F a1_eat) and (<all>F a3_eat) and (<all>F a2_eat));
end Formulae

